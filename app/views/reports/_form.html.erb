<%= form_with(model: report, data: {controller: "autosave", target: "autosave.form", action: "ajax:success->autosave#success ajax:error->autosave#error"}) do |form| %>

  <div style="position:absolute;top: 0; left: 0; right: 0;width: 100%;" class="py-2 row justify-content-center align-items-center">
    <span class="p-3" data-target="autosave.status"></span>
  </div>


  <h6><%= @address %></h6>
  <h6><%= @customer %></h6>


  <% @questions.each.with_index do |q,i| %>
    <div class="tab">
      <div class="mt-5">
      <h3 class="bold-header-smaller"><%= q.first.section.capitalize %></h3>
      <div style="border-bottom: 2px solid #111; width: 100%;"></div>

        <% q.each do |qq| %>
          <%= form.fields_for :responses, qq.responses.first do |r| %>
            <h3 class="mt-5"><%= qq.question %></h3 class="mt-5">

            <% qq.choices.order(id: :asc).each do |choice| %>
              <div class="col-md-3">
                <%= r.label choice.choice %>
                <%= r.radio_button :choice_id, choice.id, data: {action: "click->autosave#save"} %>
              </div>
            <% end %>

            <div class="form-group mt-4">
              <%= r.text_area :response, class: "form-control", placeholder: "Response", rows: "5", data: {action: "keyup->autosave#save"} %>
            </div>

    
<!-- 
            <div class="form-group mt-4">
              <%#= r.file_field :images, multiple: true, data: {action: "change->autosave#save"} %>
            </div> -->

          <% end %>
        <% end %>
      </div>
      <hr>
    </div>
  <% end %>

  <div style="overflow:auto;">
    <div style="float:right;">
      <button type="button" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
      <button type="button" id="nextBtn" onclick="nextPrev(1)">Next</button>
    </div>
  </div>
<!--  
  <div class="actions">
    <%#= link_to "See Report", report_path(@report), class: "btn btn-primary" %>
  </div> -->
<% end %>


<!-- Circles which indicates the steps of the form: -->
<div style="text-align:center;margin-top:40px;">
  <span class="step"></span>
  <span class="step"></span>
  <span class="step"></span>
  <span class="step"></span>
  <span class="step"></span>
  <span class="step"></span>
  <span class="step"></span>
  <span class="step"></span>
</div>


<script>
  var currentTab = 0; // Current tab is set to be the first tab (0)
showTab(currentTab); // Display the current tab

function showTab(n) {
  // This function will display the specified tab of the form ...
  var x = document.getElementsByClassName("tab");
  x[n].style.display = "block";
  // ... and fix the Previous/Next buttons:
  if (n == 0) {
    document.getElementById("prevBtn").style.display = "none";
  } else {
    document.getElementById("prevBtn").style.display = "inline";
  }
  if (n == (x.length - 1)) {
    document.getElementById("nextBtn").innerHTML = "Submit";
  } else {
    document.getElementById("nextBtn").innerHTML = "Next";
  }
  // ... and run a function that displays the correct step indicator:
  fixStepIndicator(n)
}

function nextPrev(n) {
  // This function will figure out which tab to display
  var x = document.getElementsByClassName("tab");
  // Exit the function if any field in the current tab is invalid:
  if (n == 1 && !validateForm()) return false;
  // Hide the current tab:
  x[currentTab].style.display = "none";
  // Increase or decrease the current tab by 1:
  currentTab = currentTab + n;
  // if you have reached the end of the form... :
  if (currentTab >= x.length) {
    //...the form gets submitted:
    // document.getElementById("regForm").submit();
    return false;
  }
  // Otherwise, display the correct tab:
  showTab(currentTab);
}

function validateForm() {
  // This function deals with validation of the form fields
  var x, y, i, valid = true;
  x = document.getElementsByClassName("tab");
  y = x[currentTab].getElementsByTagName("input");
  // A loop that checks every input field in the current tab:
  for (i = 0; i < y.length; i++) {
    // If a field is empty...
    if (y[i].value == "") {
      // add an "invalid" class to the field:
      y[i].className += " invalid";
      // and set the current valid status to false:
      valid = false;
    }
  }
  // If the valid status is true, mark the step as finished and valid:
  if (valid) {
    document.getElementsByClassName("step")[currentTab].className += " finish";
  }
  return valid; // return the valid status
}

function fixStepIndicator(n) {
  // This function removes the "active" class of all steps...
  var i, x = document.getElementsByClassName("step");
  for (i = 0; i < x.length; i++) {
    x[i].className = x[i].className.replace(" active", "");
  }
  //... and adds the "active" class to the current step:
  x[n].className += " active";
}
</script>